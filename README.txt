Тестовое задание на позицию Junior Python Programmer (стажер) в компанию "Lesta Studio"

How to:
1) Установка Python v2.7 с официального сайта https://www.python.org/download/releases/2.7
2) Установка pip командой python get-pip.py
3) Установка модуля pytest для проверки корректной работы програм pip install pytest
4) Запуск тестов через терминал с использованием команды python -m pytest test_*.py (подставьте название файла)

В репозитории лежат решения к трем заданиям, а также тесты к каждому из них. Все файлы имеют расширение '.py' и написаны на Python 2.7.

1. Task_1

Задание:
На языке Python реализовать алгоритм (функцию) определения четности целого числа, который будет аналогичен
нижеприведенному по функциональности, но отличен по своей сути. Объяснить плюсы и минусы обеих реализаций.
Python example:
def isEven(value):return value%2==0

Пояснение к решению:

Данный алгоритм использует оператор 'бинарное И', он возвращает 1, если у обоих чисел в битовой системе
счисления значение разрядов равно единице. В данном случае производится сравнение  последнего символа переданного числа
c 1. У четных чисел в двоичной системе последний символ всегда равен нулю. Данный код не требует сложных компьютерных
вычислений, поэтому являтся предпочтительным при работе с большими числами.

2. Task_2

Задание:
На языке Python (2.7) реализовать минимум по 2 класса реализовывающих циклический буфер FIFO. Объяснить плюсы
и минусы каждой реализации.

Пояснение к решению:

Представлены 2 варианта реализации циклического буффера FIFO.
-В первом случае (CycledBuffer1) код был написан с помощью встроенного модуля  collections
Данный алгоритм использует функцию deque, которая позволяет создавать двухсторонюю очередь. Модуль уже содержит
основные инструменты для работы с очередями, поэтому код визуально понятен и лаконичен
-Вторая реализацию (CycledBuffer2) включала в себя создание  односвязного списка 'вручную', где при добавлении нового
элемента смещается указатель. Несмотря на одинаковую функциональность, в данном алгоритме получение значений
буффера, и, как следствие, его размера сопровождается введением дополнительного счетчика и цикла перебора, все это
является причиной более сложной структуры кода.

3. Task_3

Задание:
На языке Python реализовать функцию, которая быстрее всего (по процессорным тикам) отсортирует данный ей массив
чисел. Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным).
Объяснить почему вы считаете, что функция соответствует заданным критериям.

Пояснение к решению:

Сортировка вставками - является устойчивым алгоритмом сортировки,т.е. не изменяет порядок элементов, если на вход
передается массив с уже отсортированными данными, однако в общем случае работает достаточно медленно. Сортировка
вставками не требует выделения памяти для обработки массива, что является одним из его главных преимуществ.

Быстрая сортировка оправдывает свое название, яляется одной из самых быстрых по процессорному времени,
однако в отличие от сортировки вставками потребляет много памяти при передачи мощного массива, что может служить проблемой.
Исходя из задания, в первую очередь стоит делать упор на временные затраты, а чтобы исключить аварийное завершение
программы при обработке большого массива чисел, необходимо определить условие выхода.
